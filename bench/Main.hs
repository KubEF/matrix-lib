module Main where

import Criterion
import Criterion.Main (defaultMain)
import Data.List
import GHC.Word
import GenTH
import Matrix
import MatrixMapNTH (myZipWith10)
import ParseMTX
import System.Random

pureGen :: StdGen
pureGen = mkStdGen 137

generateRndList :: Int -> [Word64]
generateRndList n = take n (unfoldr (Just . genWord64) pureGen)

add10 :: (Num a) => a -> a -> a -> a -> a -> a -> a -> a -> a -> a -> a
add10 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10

appl :: [b -> c] -> [b] -> [c]
appl = zipWith ($)

trueZipWith10 :: (a -> b1 -> b2 -> b3 -> b4 -> b5 -> b6 -> b7 -> b8 -> b9 -> c) -> [a] -> [b1] -> [b2] -> [b3] -> [b4] -> [b5] -> [b6] -> [b7] -> [b8] -> [b9] -> [c]
trueZipWith10 func l1 l2 l3 l4 l5 l6 l7 l8 l9 l10 = map func l1 `appl` l2 `appl` l3 `appl` l4 `appl` l5 `appl` l6 `appl` l7 `appl` l8 `appl` l9 `appl` l10

trueTrough4Matrix :: (Applicative f) => (a1 -> a2 -> a1) -> f a1 -> f a2 -> f a2 -> f a2 -> f a1
trueTrough4Matrix binFunc m1 m2 m3 m4 = fmap binFunc (fmap binFunc (fmap binFunc m1 <*> m2) <*> m3) <*> m4

main :: IO ()
main = do
    let [l1, l2, l3] = [generateRndList 1000, generateRndList 10000, generateRndList 100000]
        [l10, l11, l12, l13, l14, l15, l16, l17, l18, l19] = [generateRndList 1000 | a <- [1 .. 10]]
        [l20, l21, l22, l23, l24, l25, l26, l27, l28, l29] = [generateRndList 10000 | a <- [1 .. 10]]
        [l30, l31, l32, l33, l34, l35, l36, l37, l38, l39] = [generateRndList 10000000 | a <- [1 .. 10]]
    m1 <- readFunc "bench/1138_bus.mtx"
    m2 <- readFunc "bench/meg4.mtx"
    m3 <- readFunc "bench/ex31.mtx"
    let matrix1 = Matrix m1
        matrix2 = Matrix m2
        matrix3 = Matrix m3
    defaultMain
        [ bgroup
            "benches of myZipWith10 function from TH"
            [ -- bench "size 1000 test" $ nf (myZipWith10 add10 l10 l11 l12 l13 l14 l15 l16 l17 l18) l19
              -- , bench "size 10000 test" $ nf (myZipWith10 add10 l20 l21 l22 l23 l24 l25 l26 l27 l28) l29
              bench "size 10000000 test" $ nf (myZipWith10 add10 l30 l31 l32 l33 l34 l35 l36 l37 l38) l39
            ]
        , bgroup
            "benches of ZipWith10 function from honest realization"
            [ -- bench "size 1000 test" $ nf (trueZipWith10 add10 l10 l11 l12 l13 l14 l15 l16 l17 l18) l19
              -- , bench "size 10000 test" $ nf (trueZipWith10 add10 l20 l21 l22 l23 l24 l25 l26 l27 l28) l29
              bench "size 10000000 test" $ nf (trueZipWith10 add10 l30 l31 l32 l33 l34 l35 l36 l37 l38) l39
            ]
        , bgroup
            "benches through4Matrix generated by TH"
            [ bench "matrix1" $ nf (trough4Matrix (+) matrix1 matrix1 matrix1) matrix1
            , bench "matrix2" $ nf (trough4Matrix (+) matrix2 matrix2 matrix2) matrix2
            , bench "matrix3" $ nf (trough4Matrix (+) matrix3 matrix3 matrix3) matrix3
            ]
        , bgroup
            "benches through4Matrix generated by me honest"
            [ bench "matrix1" $ nf (trueTrough4Matrix (+) matrix1 matrix1 matrix1) matrix1
            , bench "matrix2" $ nf (trueTrough4Matrix (+) matrix2 matrix2 matrix2) matrix2
            , bench "matrix3" $ nf (trueTrough4Matrix (+) matrix3 matrix3 matrix3) matrix3
            ]
        ]
